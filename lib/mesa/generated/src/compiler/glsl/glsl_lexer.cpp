#line 2 "src/compiler/glsl/glsl_lexer.cpp"

#line 4 "src/compiler/glsl/glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/*	$OpenBSD: glsl_lexer.cpp,v 1.15 2025/06/05 13:24:07 jsg Exp $	*/

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* $OpenBSD: glsl_lexer.cpp,v 1.15 2025/06/05 13:24:07 jsg Exp $ */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_glsl_lexer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_glsl_lexer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_glsl_lexer_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_glsl_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_glsl_lexer__load_buffer_state (yyscan_t yyscanner );
static void _mesa_glsl_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_glsl_lexer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *_mesa_glsl_lexer_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_glsl_lexer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_glsl_lexer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_glsl_lexer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 300
#define YY_END_OF_BUFFER 301
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1154] =
    {   0,
        0,    0,   20,   20,    0,    0,  301,  299,    1,   27,
      299,  299,  299,  299,  299,  299,  298,  299,  185,  183,
      299,  299,  299,  297,  299,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  299,    1,  299,   26,   20,
       25,   26,   24,   23,   21,   22,   18,   17,    1,  167,
      176,  168,  179,  173,  162,  175,  163,  182,  191,  174,
      192,  185,    0,    0,  185,  185,    0,  185,  183,  183,
      183,  183,  171,  164,  166,  165,  172,  297,  180,  170,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,   36,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
       40,  297,  297,   68,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  181,
      169,    1,    0,    0,    2,    0,    0,    0,    0,    0,
       20,   19,   23,   22,    0,  191,    0,    0,    0,    0,
      190,    0,  192,    0,    0,    0,    0,    0,  193,  184,
      177,  178,  297,  200,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,   39,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,   32,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,   69,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,    0,    0,    0,    0,    0,   19,    0,
      191,  187,  195,    0,  190,    0,    0,    0,    0,    0,

      192,  188,  196,  193,    0,    0,    0,    0,  184,  184,
      184,  297,  297,  297,   30,  297,  297,  297,  258,  251,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,   38,  203,  297,  297,  297,  297,  297,  297,
       76,  297,  297,  208,  221,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  218,
      254,   56,   57,   58,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      206,  198,  297,  297,  297,   33,  297,  297,  297,  297,

      297,  297,  297,   53,   54,   55,  160,  297,  297,  297,
        0,    0,    0,    0,    0,    0,  190,  186,  194,  189,
      197,  297,  297,  297,   34,  297,   44,   45,   46,  297,
      201,  297,  297,   29,  297,  297,  297,  297,  232,  233,
      234,  297,  229,  230,  231,  297,  297,  297,  199,  297,
      222,   31,  244,  245,  246,  256,  226,  227,  228,  297,
      297,  297,  297,   70,  224,  297,  297,  297,  297,   47,
       48,   49,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,   79,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  219,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  202,  297,  297,
      253,   50,   51,   52,  297,  297,   37,  297,    0,    0,
        0,    0,    0,  261,  297,  297,   72,  297,  297,  259,
      297,  297,   43,  297,  297,  297,  297,  220,  215,  297,
      297,  264,  297,  297,  297,  297,  297,  297,  297,  297,
      211,  297,  297,  297,  297,  161,   59,   60,   61,   62,
       63,   64,   65,   66,   67,  297,  297,  297,  297,  225,
      207,  297,  297,  213,  297,  297,  297,   42,  297,  271,
      158,  250,   77,  214,  159,  297,  262,  209,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,    0,

        0,    0,    0,    0,  297,  297,  297,  297,  297,  210,
       41,  235,  236,  237,  238,  239,  240,  241,  242,  243,
      297,  285,  286,  287,  282,  283,  284,  297,  274,  275,
      276,  297,  297,  297,  297,  297,  115,  116,  117,  297,
      297,  273,  297,  297,  297,  255,  297,  297,  297,  297,
      114,  297,  297,  297,  297,  297,  297,  297,  297,  204,
      278,  279,  280,  297,  297,  297,  297,  297,  297,   71,
      297,  297,   73,  297,  297,    0,    0,    0,    0,    0,
        0,  297,  297,   74,  152,   35,  216,  297,  297,  297,
      297,  126,  127,  128,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  212,  297,
      297,  297,  155,  270,  154,  297,  297,  297,  297,  297,
      297,  297,  297,  205,  137,  138,  139,  297,  297,  277,
      223,  297,  153,  297,    0,    5,    0,    8,    0,    0,
        0,   16,    3,  297,   28,  288,  289,  290,  291,  292,
      293,  294,  295,  296,  281,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  124,  297,  297,  297,  119,  217,
       75,  297,  297,  297,  297,  297,  252,  297,  260,  257,
      265,   80,   81,   82,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  156,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
      297,  297,  135,  297,  297,  130,  297,  297,  297,  297,
      297,  297,  297,  297,   91,   92,   93,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      272,  297,  297,  146,  297,  297,  141,   97,   98,   99,
      297,  297,    4,    0,    0,    0,    6,    0,    0,    0,
        0,    0,    0,    0,  157,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  118,  297,  120,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  103,
      297,  297,  297,  297,   83,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,    0,    7,
        0,    0,    0,    0,    0,  297,  297,  297,  129,  131,
      297,  121,  297,  122,  297,  297,  297,  297,  297,  104,
      297,  297,   94,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  140,  142,
      297,  297,  297,  105,  297,  297,  100,    0,    0,    0,
        0,  132,  133,  297,  297,  297,  148,  297,  297,  149,
      297,  297,  297,  297,  297,  297,  297,   78,  297,  297,
      297,  297,  247,  297,  248,  263,  297,  297,  297,  143,
      144,  297,  297,  297,  297,  297,  297,  297,  297,    0,

        0,    0,    0,  297,  297,  297,  297,  125,  123,  297,
      297,  297,  266,  268,  297,   84,  297,   85,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  267,
      269,  297,    0,    0,    0,    0,    0,  136,  134,  297,
      297,   95,   96,  297,  297,  297,   86,  297,  297,  297,
       87,  297,  297,  297,  147,  145,  101,  102,  297,  297,
        0,    0,    0,    0,    0,  297,  297,  297,  297,  297,
      297,  106,  297,  109,  297,  297,  297,  297,    0,    0,
        0,    0,    0,    0,  297,  297,  107,  110,  297,  297,
      297,  297,   88,  297,  108,  111,    0,    0,    0,    9,

        0,    0,    0,    0,  150,  151,  297,  297,  297,  297,
      113,    0,    0,   10,    0,    0,    0,    0,  297,  297,
      249,  297,    0,    0,    0,    0,    0,   13,   89,   90,
      297,    0,    0,    0,   11,    0,   14,  297,    0,    0,
       12,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   23,   25,   25,   26,    1,   27,
       28,   29,    1,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   38,   38,   39,   40,   38,   41,   38,
       38,   42,   43,   44,   45,   38,   38,   46,   38,   38,
        1,    1,    1,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   38,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,   74,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    3,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    5,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[1162] =
    {   0,
        0,   73,   81,    0, 1672, 1671, 1673, 1676,   75, 1676,
     1644, 1643,  146, 1642,  143,  144,  142, 1641,  159,  215,
      141, 1640,  157,    0,  142,  125,  131,  148,  153,  147,
      196, 1604,  172,  189,  124,  171,  139, 1598,  179,  179,
      217,  214,  233,  199,  161,  195,  289,  298, 1676,  259,
     1676, 1648, 1676,  286, 1676,    0, 1676, 1676,  310, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,  350, 1676,
      393,  225,  300,  317, 1676, 1625,    0, 1603,    0, 1676,
     1623, 1601, 1632, 1676, 1676, 1676, 1631,    0, 1676, 1676,
     1591, 1596,  209, 1593, 1602, 1600, 1600, 1586, 1589, 1601,

      287,  227, 1583, 1599, 1579, 1593, 1579, 1576, 1576, 1618,
     1581,  257,  264, 1575, 1586, 1571, 1577, 1581, 1582, 1612,
        0, 1572, 1583,  296, 1582, 1577, 1557,  133, 1561, 1575,
     1565,  225, 1558,  279, 1571, 1573,  312, 1552, 1560,  284,
     1547, 1556,  280,  300, 1561, 1556, 1559, 1547, 1550, 1591,
      315,  300,  331, 1559, 1546, 1559,  220, 1552, 1551, 1676,
     1676,  388,  395,  417, 1676, 1536, 1544, 1548, 1539, 1550,
      397,    0,  415,    0,  469, 1676, 1567, 1566, 1546, 1545,
      461,  487, 1676, 1563, 1562, 1542, 1541,  504,  512,  405,
     1676, 1676, 1537,    0, 1532, 1527, 1531, 1541, 1535, 1537,

      328, 1520, 1520, 1532, 1523,  316, 1534, 1519, 1530, 1513,
     1529, 1527, 1524, 1515, 1522,  325, 1508, 1506, 1519, 1504,
     1521,    0, 1518, 1505, 1513, 1510, 1514, 1495, 1514, 1507,
     1504, 1492, 1491,  401, 1509, 1496, 1505, 1492, 1499, 1489,
      387, 1495, 1498, 1488, 1496, 1484, 1488, 1479, 1494, 1493,
     1483, 1490,  378, 1473, 1492, 1475, 1473, 1472, 1483, 1472,
     1467, 1465, 1467, 1478, 1463, 1465, 1462, 1474, 1473, 1456,
     1475, 1456,  388, 1465, 1460, 1458, 1468, 1446,  436, 1465,
     1467, 1455, 1447, 1446, 1461, 1449, 1461, 1444,    0,  520,
      555, 1676, 1676,  538, 1676, 1473, 1472, 1452, 1451,  563,

      598, 1676, 1676, 1676, 1469, 1468, 1448, 1447, 1676, 1461,
     1439, 1429, 1440, 1439,    0, 1436, 1441,  440,    0,    0,
     1428, 1426, 1426, 1427, 1422, 1431, 1419, 1419, 1436,  446,
     1424,  458,    0,    0, 1418, 1433, 1428, 1427, 1426, 1426,
        0, 1410,  498,    0,    0, 1412,  549, 1422, 1419, 1420,
     1410, 1404, 1403, 1447, 1403, 1402, 1402,  575, 1397,    0,
        0, 1393, 1392, 1391, 1393, 1394, 1399, 1393, 1389, 1403,
     1398, 1398, 1396, 1395, 1388, 1382, 1384, 1383, 1386, 1386,
     1392, 1377, 1380, 1375, 1384, 1389, 1376, 1373, 1386, 1376,
        0,    0, 1383, 1381, 1378, 1408, 1368, 1368, 1374, 1364,

     1372,  578, 1369,    0,    0,    0,    0, 1358, 1371, 1370,
     1369, 1361, 1367, 1364, 1352,  583,  641, 1676, 1676, 1676,
     1676, 1364, 1365, 1365,    0, 1349,    0,    0,    0, 1350,
        0, 1359, 1349,    0, 1348, 1349, 1355, 1342, 1335, 1334,
     1333, 1350,    0,    0,    0, 1340, 1334, 1349,    0, 1334,
        0, 1379,    0,    0,    0,    0,    0,    0,    0, 1346,
     1343,  593, 1342,    0,    0, 1346, 1339, 1335, 1331,    0,
        0,    0, 1323,  606,  609,  618, 1328, 1324, 1330, 1320,
     1318, 1332, 1316,    0, 1316, 1330, 1318, 1314, 1321, 1315,
     1327, 1322, 1322,    0, 1319, 1316, 1320, 1303, 1301, 1304,

     1311, 1317, 1312, 1313, 1310, 1340, 1296,    0, 1298, 1299,
        0,    0,    0,    0, 1296, 1300,    0, 1293, 1293, 1286,
      419, 1292, 1295,    0, 1303, 1282,    0, 1292, 1286,    0,
     1279, 1279,    0, 1293,  621,  624,  627,    0, 1295,  635,
      647,    0, 1319,  650,  654, 1309, 1308, 1307, 1271, 1270,
        0, 1270, 1287, 1286, 1281,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1269, 1283, 1269, 1266,    0,
        0, 1272,  418,    0, 1268, 1276, 1275,    0, 1267, 1259,
        0,    0,    0,    0,    0, 1256,    0,    0, 1255, 1267,
      661,  668, 1272, 1258, 1265, 1264, 1261, 1255, 1252, 1247,

     1260,  688, 1262, 1247, 1241, 1241, 1255, 1239, 1252,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1244, 1232, 1231, 1230,    0,    0,    0, 1252,    0,    0,
        0, 1266, 1265, 1264, 1228, 1227,  433,  662,    0, 1240,
     1243,    0, 1241, 1229, 1225,    0, 1238, 1235, 1234, 1223,
        0, 1222, 1212, 1230, 1215, 1218,  695, 1223, 1226,    0,
        0,    0,    0, 1245, 1244, 1243, 1207, 1206, 1206,    0,
     1220, 1206,    0, 1217, 1209, 1211, 1214,  728,  716,  421,
     1204, 1208, 1211,    0,    0,    0,    0,  702,  722,  733,
     1196, 1232,  525,    0, 1207, 1210, 1194, 1202, 1192, 1213,

     1202, 1198, 1199, 1199, 1198, 1183,  737, 1196,    0, 1197,
     1185, 1184,    0,    0,    0, 1180, 1211, 1210, 1209, 1173,
     1172, 1168, 1176,    0, 1207,  654,    0, 1182, 1185,    0,
        0,  740,    0, 1162, 1170, 1676,  798, 1676,  760,    0,
      788,  783, 1676, 1170,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1166, 1165, 1186, 1175, 1173,
     1173, 1160, 1175, 1158, 1192, 1170, 1171, 1166, 1188,    0,
        0, 1184, 1183, 1182, 1146, 1145,    0, 1145,    0,    0,
        0,  439,  785, 1169, 1150, 1141, 1123, 1136, 1123, 1122,
     1143, 1132, 1130, 1130, 1149, 1148, 1147, 1111, 1110,    0,

     1115, 1169,  852,  840,  648, 1131, 1121, 1109, 1123, 1104,
     1105, 1104, 1138, 1116, 1113, 1135, 1115, 1111, 1112, 1095,
     1092, 1106,   11,   93,  160,  747,    0,  171,  242,  241,
      261,  296,  289,  348,  352,  373,  378,  389,  419,  432,
        0,  432,  434,  473,  453,  460,  486,  516,  756,    0,
      494,  500, 1676,  547,  792,  827, 1676,  864,    0,  887,
      531,  539,  524,  528,    0,  561,  583,  569,  569,  612,
      614,  619,  635,  631,  652,    0,  657,    0,  660,  663,
      667,  702,  711,  712,  714,  701,  708,  726,  711,  762,
      751,  755,  763,  771,  801,  768,  785,  787,  772,  771,

      774,  775,  776,  782,  805,  796,  796,  798,  875, 1676,
      891,  816,  788,  811,  817,  809,  819,  830,    0,    0,
      832,  856,  830,  858,  853,  833,  855,  848,  849,  885,
      865,  864,  888,  866,  871,  869,  873,  859,  858,  874,
      860,  863,  864,  874,  869,  860,  861,  869,    0,    0,
      870,  871,  872,  908,  888,  887,  911,  903,  888,  883,
      888,    0,    0,  897,  898,  892,    0,  893,  878,    0,
      879,  903,  904,  889,  888,  891,  892,    0,  886,  896,
      888,  896,  919,  900,    0,    0,  899,  916,  917,    0,
        0,  918,  919,  920,  921,  906,  905,  908,  909,  973,

      974,  920,  918,  909,  910,  934,  935,    0,    0,  914,
      915,  923,    0,    0,  924,  947,  921,  949,  944,  938,
      925,  947,  945,  938,  927,  928,  929,  930,  938,    0,
        0,  939, 1003, 1004, 1005,  938,  957,    0,    0,  961,
      962,    0,    0,  967,  968,  962,    0,  963,  948,  972,
        0,  950,  960,  983,    0,    0,    0,    0,  976,  977,
      965, 1026,  975,  977, 1030,  970,  971,  964,  966,  990,
      991,    0,  990, 1000,  974, 1011,  974,  975,  979,  995,
     1049, 1048, 1053, 1060,  982,  986,    0,    0, 1005, 1011,
     1003, 1011,    0, 1026,    0,    0, 1021, 1069, 1070, 1676,

     1074, 1075, 1081, 1030,    0,    0, 1010, 1015, 1017, 1039,
        0, 1025, 1089, 1676, 1091, 1041, 1043, 1097, 1028, 1030,
        0, 1052, 1048, 1052, 1105, 1106, 1110, 1676,    0,    0,
     1050, 1065, 1114, 1119, 1676, 1123, 1676, 1050, 1065, 1127,
     1676,    0, 1063, 1131, 1132, 1143, 1144, 1080, 1081, 1145,
     1150, 1676, 1676, 1193, 1195, 1197, 1147, 1202, 1149, 1205,
     1152
    } ;

static yyconst flex_int16_t yy_def[1162] =
    {   0,
     1153,    1, 1153,    3, 1154, 1154, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1155, 1153, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1156, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,   19, 1153, 1153, 1153, 1153, 1157, 1153,   20, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1155, 1153, 1153,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1158, 1153, 1156, 1153, 1153, 1153, 1153, 1153, 1153,
       71, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1157,
     1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1153, 1153, 1153, 1153, 1153, 1158, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153, 1153,
     1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153,

     1153, 1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1153, 1153, 1153, 1153, 1153,
     1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1153, 1153, 1153, 1153, 1153, 1159,
     1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1153, 1160, 1153, 1153, 1159, 1153, 1153, 1153, 1153, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1153, 1160, 1153, 1153, 1153, 1153, 1161, 1153,
     1153, 1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153, 1153,
     1161, 1153, 1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153, 1153, 1153,
     1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153,

     1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1153, 1153, 1153, 1153, 1153, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1153, 1153, 1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1153, 1153,
     1153, 1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1155, 1155,
     1155, 1155, 1153, 1153, 1153, 1153, 1153, 1153, 1155, 1155,
     1155, 1153, 1153, 1153, 1153, 1153, 1153, 1155, 1153, 1153,
     1153, 1155, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153
    } ;

static yyconst flex_int16_t yy_nxt[1751] =
    {   0,
        8,    9,   10,    9,    9,   11,    8,    8,   12,   13,
        8,    8,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,    8,   21,   22,   23,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   25,   24,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   24,   24,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       24,   24,   24,   46,   47,  878,   59,   47,   59,   59,
       48,   49,   50,   51,   50,   50,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   52,   53,   54,

       54,   54,   54,   54,   54,   54,   55,   49,   49,   49,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   49,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   49,   62,   65,  879,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   83,   84,   89,
       66,   68,  127,   63,   71,   91,   72,   72,   72,   72,
       72,   72,   72,   73,   86,   87,  128,  131,   90,  880,
       92,   93,   74,   94,  239,   95,   98,   75,   96,   97,

       99,  132,  240,   76,   77,  102,  107,  100,  108,  103,
      101,   74,  120,  104,  110,  105,  158,  109,   75,  129,
      117,  106,  160,  130,  884,  159,   78,  134,  118,   77,
       71,  137,   79,   79,   79,   79,   79,   79,   79,   79,
      119,  138,  121,  135,  111,  122,  136,  155,   74,  123,
      124,  156,  112,   80,  125,  113,  150,  126,  114,   81,
      171,  157,  171,  171,  115,  139,  146,   74,  161,  147,
     1153,  195,  140,  141,   80,  196,  280,  142,  148,  281,
      207,  244,   82,  143,  144,  149,  145,  208,  245,  151,
      162,  885,   59,  162,  152, 1153,  163,  886,  153,  164,

      165,  154,  164,  173,  173,  173,  173,  173,  173,  173,
      173,   59,  220,   59,   59,   71,  218,   73,   73,   73,
       73,   73,   73,   73,   73,  887,  221,  219,  261,  247,
      188,  188,  257,   74,  189,  189,  189,  189,  189,  189,
      189,  189,  204,  248,  262,  249,  258,  205,  206,  263,
      166,  888,   74,  889,  167,  231,  273,  168,  232,  233,
      252,  169,  234,  264,  235,  274,  170,   69,   69,   69,
       69,   69,   69,   69,   69,  271,  272,  253,  254,  275,
      319,  325,  326,  175,  176,  336,  177,  276,  178,  162,
      890,   59,  162,  337,  320,  163,  164,  165,  171,  164,

      171,  171,  175,  176,  891,  179,  362,  363,  364,  180,
      181,  181,  181,  181,  181,  181,  181,  181,  164,  165,
      602,  164,  742,  602,  354,  742,  182,  183,  892,  184,
      893,  185,  173,  173,  173,  173,  173,  173,  173,  173,
      376,  397,  894,  309,  377,  182,  183,  166,  186,  310,
      398,  167,  187,  355,  168,  404,  405,  406,  169,  427,
      428,  429,  697,  170,  309,  439,  440,  441,  831,  166,
      651,  895,  311,  167,  652,  698,  168,  443,  444,  445,
      169,  832,  290,  290,  896,  170,  291,  291,  291,  291,
      291,  291,  291,  291,  294,  295,  897,  296,  898,  297,

      300,  300,  899,  900,  301,  301,  301,  301,  301,  301,
      301,  301,  901,  294,  295,  902,  298,  453,  454,  455,
      299,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  291,  291,  291,
      291,  291,  291,  291,  291,  903,  304,  907,  305,  908,
      306,  416,  416,  855,  757,  417,  417,  417,  417,  417,
      417,  417,  417,  912,  758,  304,  759,  307,  457,  458,
      459,  308,  291,  291,  291,  291,  291,  291,  291,  291,
      301,  301,  301,  301,  301,  301,  301,  301,  913,  176,
      914,  177,  915,  178,  470,  471,  472,  512,  513,  514,

      417,  417,  417,  417,  417,  417,  417,  417,  176,  916,
      179,  546,  547,  548,  180,  301,  301,  301,  301,  301,
      301,  301,  301,  549,  550,  557,  558,  559,  560,  561,
      562,  917,  183,  918,  184,  919,  185,  563,  564,  565,
      612,  613,  614,  615,  616,  617,  618,  619,  620,  737,
      738,  183,  737,  186,  622,  623,  624,  187,  417,  417,
      417,  417,  417,  417,  417,  417,  625,  626,  627,  629,
      630,  631,  632,  633,  634,  295,  920,  296,  921,  297,
      661,  662,  663,  790,  635,  636,  664,  665,  666,  602,
      922,  699,  602,  791,  295,  792,  298,  923,  667,  668,

      299,  700,  924,  701,  702,  678,  679,  679,  679,  679,
      679,  679,  679,  717,  718,  719,  925,  737,  738,  926,
      737,  746,  747,  748,  927,  720,  721,  928,  722,  737,
      738,  929,  737,  741,  741,  741,  741,  741,  741,  741,
      741,  749,  750,  751,  930,  739,  739,  739,  739,  739,
      739,  739,  752,  753,  754,  772,  773,  774,  795,  796,
      797,  737,  738,  931,  737,  932,  933,  775,  776,  934,
      798,  799,  935,  740,  936,  937,  881,  739,  739,  739,
      739,  739,  739,  739,  742,  904,  882,  742,  883,  737,
      738,  938,  737,  909,  910,  905,  909,  906,  740,  737,

      738,  939,  737,  940,  802,  741,  741,  741,  741,  741,
      741,  741,  741,  941,  833,  803,  804,  804,  804,  804,
      804,  804,  804,  942,  834,  806,  835,  836,  856,  857,
      943,  856,  945,  946,  807,  947,  948,  949,  950,  951,
      952,  856,  857,  944,  856,  808,  953,  954,  955,  956,
      957,  958,  809,  856,  857,  959,  856,  860,  860,  860,
      860,  860,  860,  860,  860,  856,  857,  960,  856,  858,
      858,  858,  858,  858,  858,  858,  909,  910,  961,  909,
      962,  858,  858,  858,  858,  858,  858,  858,  856,  857,
      963,  856,  856,  857,  964,  856,  965,  859,  966,  967,

      968,  969,  970,  971,  860,  860,  860,  860,  860,  860,
      860,  860,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  859,  982,  983,  984,  985,  986,  987,  988,
      989,  990,  991,  992,  993,  994,  995,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1030, 1031, 1032, 1033, 1034, 1036, 1033, 1034, 1037,
     1038, 1039, 1040, 1041, 1035, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,

     1057, 1058, 1059, 1060, 1033, 1034, 1062, 1033, 1034, 1062,
     1064, 1065, 1066, 1067, 1035, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1062, 1080, 1082,
     1062, 1083, 1085, 1086, 1083, 1087, 1081, 1088, 1089, 1090,
     1084, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1101,
     1099, 1105, 1101, 1099, 1083, 1106, 1107, 1083, 1102, 1061,
     1100, 1103, 1108, 1084, 1103, 1109, 1110, 1063, 1111, 1112,
     1113, 1099, 1119, 1113, 1099, 1101, 1115, 1120, 1101, 1115,
     1114, 1100, 1103, 1117, 1102, 1103, 1121, 1122, 1063, 1123,
     1113, 1118, 1115, 1113, 1124, 1115, 1126, 1129, 1127, 1130,

     1114, 1127, 1125, 1131, 1132, 1133, 1134, 1136, 1128, 1134,
     1136, 1127, 1138, 1139, 1127, 1140, 1135, 1137, 1140, 1142,
     1134, 1128, 1104, 1134, 1136, 1141, 1143, 1136, 1140, 1144,
     1135, 1140, 1145, 1145, 1137, 1145, 1145, 1116, 1141, 1149,
     1150, 1146, 1146, 1104, 1147, 1147, 1151, 1147, 1147, 1151,
      190, 1151,  805, 1116, 1151,  911, 1152,  877,  876,  875,
      874, 1152,  873,  872,  871,  870,  869,  868,  867,  866,
      865,  864,  863,  862,  861,  855,  853,  852,  851,  850,
      849,  848,  847,  846,  845,  844,  843,  842,  841,  840,
      839, 1148, 1148,   57,   57,   57,   57,   57,   88,   88,

      174,  174,  289,  838,  289,  289,  289,  854,  854,  854,
      837,  830,  829,  828,  827,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  816,  815,  814,  813,  812,
      811,  810,  801,  800,  794,  793,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  771,
      770,  769,  768,  767,  766,  765,  764,  763,  762,  761,
      760,  756,  755,  745,  744,  743,  736,  735,  734,  733,
      732,  731,  730,  729,  728,  727,  726,  725,  724,  723,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  696,  695,  694,  693,  692,  691,

      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      680,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      660,  659,  658,  657,  656,  655,  654,  653,  650,  649,
      648,  647,  646,  645,  644,  643,  642,  641,  640,  639,
      638,  637,  628,  621,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  556,
      555,  554,  553,  552,  551,  545,  544,  543,  542,  541,

      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  456,  452,  451,  450,  449,
      448,  447,  446,  442,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  426,  425,  424,  423,  422,  309,  309,

      421,  420,  421,  420,  419,  418,  419,  418,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  403,  402,  401,
      400,  399,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  361,  360,  359,  358,  357,  356,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  324,  323,  322,  321,  318,  317,  316,
      315,  314,  313,  312,  303,  302,  303,  302,  293,  292,

      293,  292,  288,  287,  286,  285,  284,  283,  282,  279,
      278,  277,  270,  269,  268,  267,  266,  265,  260,  259,
      256,  255,  251,  250,  246,  243,  242,  241,  238,  237,
      236,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  203,
      202,  201,  200,  199,  198,  197,  194,  193,  192,  191,
       80,   80,   75,   75,  172,  133,  116,   85,   70,   64,
       61,   60, 1153,   58,   58,    7, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

static yyconst flex_int16_t yy_chk[1751] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,  823,    9,    2,    9,    9,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,   13,   15,  824,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   21,   21,   25,
       15,   16,   35,   13,   19,   26,   19,   19,   19,   19,
       19,   19,   19,   19,   23,   23,   35,   37,   25,  825,
       26,   26,   19,   27,  128,   27,   28,   19,   27,   27,

       28,   37,  128,   19,   19,   29,   30,   28,   30,   29,
       28,   19,   34,   29,   31,   29,   45,   30,   19,   36,
       33,   29,   46,   36,  828,   45,   19,   39,   33,   19,
       20,   40,   20,   20,   20,   20,   20,   20,   20,   20,
       33,   40,   34,   39,   31,   34,   39,   44,   20,   34,
       34,   44,   31,   20,   34,   31,   43,   34,   31,   20,
       50,   44,   50,   50,   31,   41,   42,   20,   46,   42,
       72,   93,   41,   41,   20,   93,  157,   41,   42,  157,
      102,  132,   20,   41,   41,   42,   41,  102,  132,   43,
       47,  829,   47,   47,   43,   72,   47,  830,   43,   48,

       48,   43,   48,   54,   54,   54,   54,   54,   54,   54,
       54,   59,  113,   59,   59,   73,  112,   73,   73,   73,
       73,   73,   73,   73,   73,  831,  113,  112,  143,  134,
       74,   74,  140,   73,   74,   74,   74,   74,   74,   74,
       74,   74,  101,  134,  143,  134,  140,  101,  101,  144,
       48,  832,   73,  833,   48,  124,  152,   48,  124,  124,
      137,   48,  124,  144,  124,  152,   48,   69,   69,   69,
       69,   69,   69,   69,   69,  151,  151,  137,  137,  153,
      201,  206,  206,   69,   69,  216,   69,  153,   69,  162,
      834,  162,  162,  216,  201,  162,  163,  163,  171,  163,

      171,  171,   69,   69,  835,   69,  241,  241,  241,   69,
       71,   71,   71,   71,   71,   71,   71,   71,  164,  164,
      521,  164,  680,  521,  234,  680,   71,   71,  836,   71,
      837,   71,  173,  173,  173,  173,  173,  173,  173,  173,
      253,  273,  838,  190,  253,   71,   71,  163,   71,  190,
      273,  163,   71,  234,  163,  279,  279,  279,  163,  318,
      318,  318,  637,  163,  190,  330,  330,  330,  782,  164,
      573,  839,  190,  164,  573,  637,  164,  332,  332,  332,
      164,  782,  175,  175,  840,  164,  175,  175,  175,  175,
      175,  175,  175,  175,  181,  181,  842,  181,  843,  181,

      182,  182,  844,  845,  182,  182,  182,  182,  182,  182,
      182,  182,  846,  181,  181,  847,  181,  343,  343,  343,
      181,  188,  188,  188,  188,  188,  188,  188,  188,  189,
      189,  189,  189,  189,  189,  189,  189,  290,  290,  290,
      290,  290,  290,  290,  290,  848,  189,  851,  189,  852,
      189,  294,  294,  854,  693,  294,  294,  294,  294,  294,
      294,  294,  294,  861,  693,  189,  693,  189,  347,  347,
      347,  189,  291,  291,  291,  291,  291,  291,  291,  291,
      300,  300,  300,  300,  300,  300,  300,  300,  862,  291,
      863,  291,  864,  291,  358,  358,  358,  402,  402,  402,

      416,  416,  416,  416,  416,  416,  416,  416,  291,  866,
      291,  462,  462,  462,  291,  301,  301,  301,  301,  301,
      301,  301,  301,  462,  462,  474,  474,  474,  475,  475,
      475,  867,  301,  868,  301,  869,  301,  476,  476,  476,
      535,  535,  535,  536,  536,  536,  537,  537,  537,  805,
      805,  301,  805,  301,  540,  540,  540,  301,  417,  417,
      417,  417,  417,  417,  417,  417,  541,  541,  541,  544,
      544,  544,  545,  545,  545,  417,  870,  417,  871,  417,
      591,  591,  591,  726,  545,  545,  592,  592,  592,  602,
      872,  638,  602,  726,  417,  726,  417,  873,  592,  592,

      417,  638,  874,  638,  638,  602,  602,  602,  602,  602,
      602,  602,  602,  657,  657,  657,  875,  679,  679,  877,
      679,  688,  688,  688,  879,  657,  657,  880,  657,  678,
      678,  881,  678,  679,  679,  679,  679,  679,  679,  679,
      679,  689,  689,  689,  882,  678,  678,  678,  678,  678,
      678,  678,  690,  690,  690,  707,  707,  707,  732,  732,
      732,  739,  739,  883,  739,  884,  885,  707,  707,  886,
      732,  732,  887,  678,  888,  889,  826,  739,  739,  739,
      739,  739,  739,  739,  742,  849,  826,  742,  826,  741,
      741,  890,  741,  855,  855,  849,  855,  849,  678,  737,

      737,  891,  737,  892,  737,  741,  741,  741,  741,  741,
      741,  741,  741,  893,  783,  737,  737,  737,  737,  737,
      737,  737,  737,  894,  783,  742,  783,  783,  856,  856,
      895,  856,  896,  897,  742,  898,  899,  900,  901,  902,
      903,  804,  804,  895,  804,  742,  904,  905,  906,  907,
      908,  912,  742,  803,  803,  913,  803,  804,  804,  804,
      804,  804,  804,  804,  804,  858,  858,  914,  858,  803,
      803,  803,  803,  803,  803,  803,  909,  909,  915,  909,
      916,  858,  858,  858,  858,  858,  858,  858,  860,  860,
      917,  860,  911,  911,  918,  911,  921,  803,  922,  923,

      924,  925,  926,  927,  860,  860,  860,  860,  860,  860,
      860,  860,  928,  929,  930,  931,  932,  933,  934,  935,
      936,  937,  803,  938,  939,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  951,  952,  953,  954,  955,  956,
      957,  958,  959,  960,  961,  964,  965,  966,  968,  969,
      971,  972,  973,  974,  975,  976,  977,  979,  980,  981,
      982,  983,  984,  987,  988,  989,  992,  993,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1002, 1000, 1001, 1003,
     1004, 1005, 1006, 1007, 1001, 1010, 1011, 1012, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,

     1027, 1028, 1029, 1032, 1033, 1034, 1035, 1033, 1034, 1035,
     1036, 1037, 1040, 1041, 1034, 1044, 1045, 1046, 1048, 1049,
     1050, 1052, 1053, 1054, 1059, 1060, 1061, 1062, 1063, 1064,
     1062, 1065, 1066, 1067, 1065, 1068, 1063, 1069, 1070, 1071,
     1065, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082,
     1081, 1085, 1082, 1081, 1083, 1086, 1089, 1083, 1082, 1033,
     1081, 1084, 1090, 1083, 1084, 1091, 1092, 1035, 1094, 1097,
     1098, 1099, 1107, 1098, 1099, 1101, 1102, 1108, 1101, 1102,
     1098, 1099, 1103, 1104, 1101, 1103, 1109, 1110, 1062, 1112,
     1113, 1104, 1115, 1113, 1116, 1115, 1117, 1119, 1118, 1120,

     1113, 1118, 1116, 1122, 1123, 1124, 1125, 1126, 1118, 1125,
     1126, 1127, 1131, 1132, 1127, 1133, 1125, 1126, 1133, 1138,
     1134, 1127, 1084, 1134, 1136, 1133, 1139, 1136, 1140, 1143,
     1134, 1140, 1144, 1145, 1136, 1144, 1145, 1102, 1140, 1148,
     1149, 1144, 1145, 1103, 1146, 1147, 1150, 1146, 1147, 1150,
     1157, 1151, 1159, 1115, 1151, 1161, 1150,  822,  821,  820,
      819, 1151,  818,  817,  816,  815,  814,  813,  812,  811,
      810,  809,  808,  807,  806,  802,  801,  799,  798,  797,
      796,  795,  794,  793,  792,  791,  790,  789,  788,  787,
      786, 1146, 1147, 1154, 1154, 1154, 1154, 1154, 1155, 1155,

     1156, 1156, 1158,  785, 1158, 1158, 1158, 1160, 1160, 1160,
      784,  778,  776,  775,  774,  773,  772,  769,  768,  767,
      766,  765,  764,  763,  762,  761,  760,  759,  758,  757,
      756,  744,  735,  734,  729,  728,  725,  723,  722,  721,
      720,  719,  718,  717,  716,  712,  711,  710,  708,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  692,  691,  683,  682,  681,  677,  676,  675,  674,
      672,  671,  669,  668,  667,  666,  665,  664,  659,  658,
      656,  655,  654,  653,  652,  650,  649,  648,  647,  645,
      644,  643,  641,  640,  636,  635,  634,  633,  632,  628,

      624,  623,  622,  621,  609,  608,  607,  606,  605,  604,
      603,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      590,  589,  586,  580,  579,  577,  576,  575,  572,  569,
      568,  567,  566,  555,  554,  553,  552,  550,  549,  548,
      547,  546,  543,  539,  534,  532,  531,  529,  528,  526,
      525,  523,  522,  520,  519,  518,  516,  515,  510,  509,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  483,  482,  481,  480,  479,  478,  477,  473,
      469,  468,  467,  466,  463,  461,  460,  452,  450,  448,

      447,  446,  442,  441,  440,  439,  438,  437,  436,  435,
      433,  432,  430,  426,  424,  423,  422,  415,  414,  413,
      412,  411,  410,  409,  408,  403,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  359,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  346,  342,  340,  339,  338,
      337,  336,  335,  331,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  317,  316,  314,  313,  312,  311,  310,

      308,  307,  306,  305,  299,  298,  297,  296,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  278,  277,  276,
      275,  274,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  240,  239,  238,  237,  236,  235,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  221,
      220,  219,  218,  217,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  205,  204,  203,  202,  200,  199,  198,
      197,  196,  195,  193,  187,  186,  185,  184,  180,  179,

      178,  177,  170,  169,  168,  167,  166,  159,  158,  156,
      155,  154,  150,  149,  148,  147,  146,  145,  142,  141,
      139,  138,  136,  135,  133,  131,  130,  129,  127,  126,
      125,  123,  122,  120,  119,  118,  117,  116,  115,  114,
      111,  110,  109,  108,  107,  106,  105,  104,  103,  100,
       99,   98,   97,   96,   95,   94,   92,   91,   87,   83,
       82,   81,   78,   76,   52,   38,   32,   22,   18,   14,
       12,   11,    7,    6,    5, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../src/compiler/glsl/glsl_lexer.ll"
#line 2 "../src/compiler/glsl/glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "util/strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"
#include "main/consts_exts.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *,
			       unsigned name_len, YYSTYPE *output);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_NO_INPUT
#define YY_USER_ACTION						\
   do {								\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0; yylloc->source = 0; \
   yylloc->path = NULL;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 return classify_identifier(yyextra, yytext, yyleng, yylval);	\
      }									\
   } while (0)

/**
 * Like KEYWORD_WITH_ALT, but used for built-in GLSL types
 */
#define TYPE_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
		      allowed_glsl, allowed_glsl_es,			\
		      alt_expr, gtype)					\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 yylval->type = gtype; 						\
	 return BASIC_TYPE_TOK;						\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 return classify_identifier(yyextra, yytext, yyleng, yylval);	\
      }									\
   } while (0)

#define TYPE(reserved_glsl, reserved_glsl_es,				\
             allowed_glsl, allowed_glsl_es,				\
             gtype)							\
   TYPE_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                 allowed_glsl, allowed_glsl_es,				\
                 false, gtype)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in later versions.
 */
#define DEPRECATED_KEYWORD(token, state, reserved_glsl,			\
                           reserved_glsl_es)				\
   do {									\
      if (yyextra->is_version(reserved_glsl, reserved_glsl_es) &&	\
          !state->compat_shader) {					\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

/**
 * Like DEPRECATED_KEYWORD, but for types
 */
#define DEPRECATED_ES_TYPE_WITH_ALT(alt_expr, gtype)			\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
         _mesa_glsl_error(yylloc, yyextra,				\
                          "illegal use of reserved word `%s'", yytext);	\
         return ERROR_TOK;						\
      } else if (alt_expr) {						\
         yylval->type = gtype;						\
         return BASIC_TYPE_TOK;						\
      } else {								\
         return classify_identifier(yyextra, yytext, yyleng, yylval);	\
      }									\
   } while (0)

#define DEPRECATED_ES_TYPE(gtype)					\
   DEPRECATED_ES_TYPE_WITH_ALT(true, gtype)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   bool is_long = (text[len - 1] == 'l' || text[len - 1] == 'L');
   const char *digits = text;

   if (is_long)
      is_uint = (text[len - 2] == 'u' && text[len - 1] == 'l') ||
                (text[len - 2] == 'U' && text[len - 1] == 'L');
   /* Skip "0x" */
   if (base == 16)
      digits += 2;

   unsigned long long value = strtoull(digits, NULL, base);

   if (is_long)
      lval->n64 = (int64_t)value;
   else
      lval->n = (int)value;

   if (is_long && !is_uint && base == 10 && value > (uint64_t)LLONG_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value. */
      _mesa_glsl_warning(lloc, state,
                         "signed literal value `%s' is interpreted as %lld",
                         text, lval->n64);
   } else if (!is_long && value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   if (is_long)
      return is_uint ? UINT64CONSTANT : INT64CONSTANT;
   else
      return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

/* Note: When adding any start conditions to this list, you must also
* update the "Internal compiler error" catch-all rule near the end of
* this file. */

#line 1421 "src/compiler/glsl/glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_glsl_lexer_lex_init (yyscan_t* scanner);

int _mesa_glsl_lexer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_glsl_lexer_lex_destroy (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_debug (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_in (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_glsl_lexer_get_out (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t _mesa_glsl_lexer_get_leng (yyscan_t yyscanner );

char *_mesa_glsl_lexer_get_text (yyscan_t yyscanner );

int _mesa_glsl_lexer_get_lineno (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lineno (int line_number ,yyscan_t yyscanner );

int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * _mesa_glsl_lexer_get_lval (yyscan_t yyscanner );

void _mesa_glsl_lexer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_glsl_lexer_get_lloc (yyscan_t yyscanner );
    
        void _mesa_glsl_lexer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#else
extern int _mesa_glsl_lexer_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_glsl_lexer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin ) {
			yyin = stdin;
		}

		if ( ! yyout ) {
			yyout = stdout;
		}

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_glsl_lexer__load_buffer_state(yyscanner );
	}

	{
#line 233 "../src/compiler/glsl/glsl_lexer.ll"


#line 1703 "src/compiler/glsl/glsl_lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1154 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1153 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 235 "../src/compiler/glsl/glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 238 "../src/compiler/glsl/glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 239 "../src/compiler/glsl/glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 240 "../src/compiler/glsl/glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 241 "../src/compiler/glsl/glsl_lexer.ll"
{
                                  if (!yyextra->ARB_shading_language_include_enable) {
                                     struct _mesa_glsl_parse_state *state = yyextra;
                                     _mesa_glsl_error(yylloc, state,
                                                      "ARB_shading_language_include required "
                                                      "to use #include");
                                   }
}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "../src/compiler/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;

				   yylloc->source = strtol(ptr, NULL, 0);
                                   yylloc->path = NULL;
				}
	YY_BREAK
case 7:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 274 "../src/compiler/glsl/glsl_lexer.ll"
{
                                   if (!yyextra->ARB_shading_language_include_enable) {
                                      struct _mesa_glsl_parse_state *state = yyextra;
                                      _mesa_glsl_error(yylloc, state,
                                                       "ARB_shading_language_include required "
                                                       "to use #line <line> \"<path>\"");
                                   }

                                   /* Eat characters until the first digit is
                                    * encountered
                                    */
                                   char *ptr = yytext;
                                   while (!isdigit(*ptr))
                                      ptr++;

                                   /* Subtract one from the line number because
                                    * yylineno is zero-based instead of
                                    * one-based.
                                    */
                                   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;

                                   while (isspace(*ptr))
                                      ptr++;

                                   /* Skip over leading " */
                                   ptr++;

                                   char *end = strrchr(ptr, '"');
                                   int path_len = (end - ptr) + 1;
                                   linear_ctx *mem_ctx = yyextra->linalloc;
                                   yylloc->path = (char *) linear_alloc_child(mem_ctx, path_len);
                                   memcpy(yylloc->path, ptr, path_len);
                                   yylloc->path[path_len - 1] = '\0';
                                }
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 316 "../src/compiler/glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 338 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 342 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 346 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 350 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 354 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_WARNING_ON;
				}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 358 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_WARNING_OFF;
				}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 362 "../src/compiler/glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 366 "../src/compiler/glsl/glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 368 "../src/compiler/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 369 "../src/compiler/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 371 "../src/compiler/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 372 "../src/compiler/glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 373 "../src/compiler/glsl/glsl_lexer.ll"
return COLON;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 374 "../src/compiler/glsl/glsl_lexer.ll"
{
				   /* We're not doing linear_strdup here, to avoid an implicit call
				    * on strlen() for the length of the string, as this is already
				    * found by flex and stored in yyleng
				    */
                                    linear_ctx *mem_ctx = yyextra->linalloc;
                                    char *id = (char *) linear_alloc_child(mem_ctx, yyleng + 1);
                                    memcpy(id, yytext, yyleng + 1);
                                    yylval->identifier = id;
				   return IDENTIFIER;
				}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 385 "../src/compiler/glsl/glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 389 "../src/compiler/glsl/glsl_lexer.ll"
{
				    yylval->n = 0;
				    return INTCONSTANT;
				}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 393 "../src/compiler/glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 394 "../src/compiler/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 396 "../src/compiler/glsl/glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 398 "../src/compiler/glsl/glsl_lexer.ll"
DEPRECATED_KEYWORD(ATTRIBUTE, yyextra, 420, 300);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 399 "../src/compiler/glsl/glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 400 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_bool; return BASIC_TYPE_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 401 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_float; return BASIC_TYPE_TOK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 402 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_int; return BASIC_TYPE_TOK; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 403 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, &glsl_type_builtin_uint);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 405 "../src/compiler/glsl/glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 406 "../src/compiler/glsl/glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 407 "../src/compiler/glsl/glsl_lexer.ll"
return DO;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 408 "../src/compiler/glsl/glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 409 "../src/compiler/glsl/glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 410 "../src/compiler/glsl/glsl_lexer.ll"
return FOR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 411 "../src/compiler/glsl/glsl_lexer.ll"
return IF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 412 "../src/compiler/glsl/glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 413 "../src/compiler/glsl/glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 414 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 0, 0, yyextra->EXT_demote_to_helper_invocation_enable, DEMOTE);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 416 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_bvec2; return BASIC_TYPE_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 417 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_bvec3; return BASIC_TYPE_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 418 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_bvec4; return BASIC_TYPE_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 419 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_ivec2; return BASIC_TYPE_TOK; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 420 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_ivec3; return BASIC_TYPE_TOK; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 421 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_ivec4; return BASIC_TYPE_TOK; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 422 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable, &glsl_type_builtin_uvec2);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 423 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable, &glsl_type_builtin_uvec3);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 424 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable, &glsl_type_builtin_uvec4);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 425 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_vec2; return BASIC_TYPE_TOK; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 426 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_vec3; return BASIC_TYPE_TOK; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 427 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_vec4; return BASIC_TYPE_TOK; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 428 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_mat2; return BASIC_TYPE_TOK; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 429 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_mat3; return BASIC_TYPE_TOK; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 430 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_mat4; return BASIC_TYPE_TOK; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 431 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat2);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 432 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat2x3);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 433 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat2x4);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 434 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat3x2);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 435 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat3);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 436 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat3x4);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 437 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat4x2);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 438 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat4x3);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 439 "../src/compiler/glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, &glsl_type_builtin_mat4);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 441 "../src/compiler/glsl/glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 442 "../src/compiler/glsl/glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 443 "../src/compiler/glsl/glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 444 "../src/compiler/glsl/glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 445 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 430, 310, yyextra->ARB_shader_storage_buffer_object_enable, BUFFER);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 446 "../src/compiler/glsl/glsl_lexer.ll"
DEPRECATED_KEYWORD(VARYING, yyextra, 420, 300);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 447 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(120, 300, 120, 300, yyextra->EXT_gpu_shader4_enable, CENTROID);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 448 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 449 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 100, 130, 300, yyextra->EXT_gpu_shader4_enable, FLAT);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 450 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 451 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 130, 0, yyextra->EXT_gpu_shader4_enable || yyextra->NV_shader_noperspective_interpolation_enable, NOPERSPECTIVE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 452 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 300, 400, 320, yyextra->has_tessellation_shader(), PATCH);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 454 "../src/compiler/glsl/glsl_lexer.ll"
DEPRECATED_ES_TYPE(&glsl_type_builtin_sampler1D);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 455 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_sampler2D; return BASIC_TYPE_TOK; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 456 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_sampler3D; return BASIC_TYPE_TOK; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 457 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_samplerCube; return BASIC_TYPE_TOK; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 458 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 0,   yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_array, &glsl_type_builtin_sampler1DArray);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 459 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_array, &glsl_type_builtin_sampler2DArray);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 460 "../src/compiler/glsl/glsl_lexer.ll"
DEPRECATED_ES_TYPE(&glsl_type_builtin_sampler1DShadow);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 461 "../src/compiler/glsl/glsl_lexer.ll"
{ yylval->type = &glsl_type_builtin_sampler2DShadow; return BASIC_TYPE_TOK; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 462 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable, &glsl_type_builtin_samplerCubeShadow);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 463 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 0,   yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_array, &glsl_type_builtin_sampler1DArrayShadow);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 464 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_array, &glsl_type_builtin_sampler2DArrayShadow);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 465 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 0,   yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_isampler1D);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 466 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_isampler2D);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 467 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_isampler3D);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 468 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_isamplerCube);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 469 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 0,   yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer && yyextra->exts->EXT_texture_array, &glsl_type_builtin_isampler1DArray);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 470 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer && yyextra->exts->EXT_texture_array, &glsl_type_builtin_isampler2DArray);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 471 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 0,   yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_usampler1D);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 472 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_usampler2D);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 473 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_usampler3D);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 474 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_usamplerCube);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 475 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 0,   yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer && yyextra->exts->EXT_texture_array, &glsl_type_builtin_usampler1DArray);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 476 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 130, 300, yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_integer && yyextra->exts->EXT_texture_array, &glsl_type_builtin_usampler2DArray);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
/* [iu]sampler2DMS are defined in GLSL ES 3.10 */
case 103:
YY_RULE_SETUP
#line 481 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, &glsl_type_builtin_sampler2DMS);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 482 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, &glsl_type_builtin_isampler2DMS);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 483 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, &glsl_type_builtin_usampler2DMS);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 484 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, &glsl_type_builtin_sampler2DMSArray);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 485 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, &glsl_type_builtin_isampler2DMSArray);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 486 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, &glsl_type_builtin_usampler2DMSArray);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 109:
YY_RULE_SETUP
#line 489 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_samplerCubeArray);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 490 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_isamplerCubeArray);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 491 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_usamplerCubeArray);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 492 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_samplerCubeArrayShadow);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 494 "../src/compiler/glsl/glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable || yyextra->OES_EGL_image_external_essl3_enable) {
			     yylval->type = &glsl_type_builtin_samplerExternalOES;
			     return BASIC_TYPE_TOK;
			  } else
			     return IDENTIFIER;
		}
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 114:
YY_RULE_SETUP
#line 503 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_gpu_shader5_enable || yyextra->EXT_gpu_shader5_enable || yyextra->OES_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 115:
YY_RULE_SETUP
#line 506 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image1D);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 507 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image2D);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 508 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image3D);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 509 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image2DRect);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 510 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_imageCube);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 511 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, &glsl_type_builtin_imageBuffer);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 512 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image1DArray);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 513 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image2DArray);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 514 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_imageCubeArray);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 515 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image2DMS);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 516 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_image2DMSArray);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 517 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage1D);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 518 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage2D);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 519 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage3D);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 520 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage2DRect);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 521 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimageCube);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 522 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, &glsl_type_builtin_iimageBuffer);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 523 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage1DArray);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 524 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage2DArray);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 525 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_iimageCubeArray);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 526 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage2DMS);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 527 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_iimage2DMSArray);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 528 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage1D);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 529 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage2D);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 530 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage3D);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 531 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage2DRect);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 532 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimageCube);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 533 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, &glsl_type_builtin_uimageBuffer);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 534 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage1DArray);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 535 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage2DArray);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 536 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, &glsl_type_builtin_uimageCubeArray);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 537 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage2DMS);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 538 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable, &glsl_type_builtin_uimage2DMSArray);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 539 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 0, 420, 0, IMAGE1DSHADOW);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 540 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 0, 420, 0, IMAGE2DSHADOW);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 541 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 0, 420, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 542 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 0, 420, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 544 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, COHERENT);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 545 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, VOLATILE);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 546 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, RESTRICT);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 547 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, READONLY);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 548 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, WRITEONLY);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 550 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_atomic_counters_enable, &glsl_type_builtin_atomic_uint);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 552 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(430, 310, 430, 310, yyextra->ARB_compute_shader_enable, SHARED);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 554 "../src/compiler/glsl/glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 555 "../src/compiler/glsl/glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 557 "../src/compiler/glsl/glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->ARB_bindless_texture_enable
		      || yyextra->KHR_blend_equation_advanced_enable
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->EXT_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->ARB_post_depth_coverage_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable
                      || yyextra->ARB_tessellation_shader_enable
                      || yyextra->EXT_shader_framebuffer_fetch_non_coherent_enable
                      || yyextra->OVR_multiview_enable) {
		      return LAYOUT_TOK;
		   } else {
		      return classify_identifier(yyextra, yytext, yyleng, yylval);
		   }
		}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 581 "../src/compiler/glsl/glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 582 "../src/compiler/glsl/glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 583 "../src/compiler/glsl/glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 584 "../src/compiler/glsl/glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 585 "../src/compiler/glsl/glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 586 "../src/compiler/glsl/glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 587 "../src/compiler/glsl/glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 588 "../src/compiler/glsl/glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 589 "../src/compiler/glsl/glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 590 "../src/compiler/glsl/glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 591 "../src/compiler/glsl/glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 593 "../src/compiler/glsl/glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 594 "../src/compiler/glsl/glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 595 "../src/compiler/glsl/glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 596 "../src/compiler/glsl/glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 597 "../src/compiler/glsl/glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 598 "../src/compiler/glsl/glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 599 "../src/compiler/glsl/glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 600 "../src/compiler/glsl/glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 601 "../src/compiler/glsl/glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 602 "../src/compiler/glsl/glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 604 "../src/compiler/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 607 "../src/compiler/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 610 "../src/compiler/glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 186:
#line 615 "../src/compiler/glsl/glsl_lexer.ll"
case 187:
#line 616 "../src/compiler/glsl/glsl_lexer.ll"
case 188:
#line 617 "../src/compiler/glsl/glsl_lexer.ll"
case 189:
YY_RULE_SETUP
#line 617 "../src/compiler/glsl/glsl_lexer.ll"
{
			    if (!yyextra->AMD_gpu_shader_half_float_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return FLOAT16CONSTANT;
			}
	YY_BREAK
case 190:
#line 625 "../src/compiler/glsl/glsl_lexer.ll"
case 191:
#line 626 "../src/compiler/glsl/glsl_lexer.ll"
case 192:
#line 627 "../src/compiler/glsl/glsl_lexer.ll"
case 193:
YY_RULE_SETUP
#line 627 "../src/compiler/glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    char suffix = yytext[strlen(yytext) - 1];
			    if (!state->is_version(120, 300) &&
			        (suffix == 'f' || suffix == 'F')) {
			        _mesa_glsl_warning(yylloc, state,
			                           "Float suffixes are invalid in GLSL 1.10");
			    }
			    yylval->real = _mesa_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 194:
#line 640 "../src/compiler/glsl/glsl_lexer.ll"
case 195:
#line 641 "../src/compiler/glsl/glsl_lexer.ll"
case 196:
#line 642 "../src/compiler/glsl/glsl_lexer.ll"
case 197:
YY_RULE_SETUP
#line 642 "../src/compiler/glsl/glsl_lexer.ll"
{
			    if (!yyextra->is_version(400, 0) &&
			        !yyextra->ARB_gpu_shader_fp64_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return DOUBLECONSTANT;
			}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 650 "../src/compiler/glsl/glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 654 "../src/compiler/glsl/glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 200:
YY_RULE_SETUP
#line 661 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 662 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 663 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 664 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 665 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 666 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 667 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 668 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 669 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 670 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 671 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 672 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 673 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 674 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 675 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 676 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 677 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 678 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE_TOK);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 679 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 680 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 681 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 100, 130, 300, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_double);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 682 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 683 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 684 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 0, 0, yyextra->EXT_gpu_shader4_enable, UNSIGNED);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 685 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 686 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 687 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 688 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 689 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 690 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dvec2);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 691 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dvec3);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 692 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dvec4);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 693 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat2);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 694 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat3);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 695 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat4);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 696 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat2);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 697 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat2x3);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 698 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat2x4);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 699 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat3x2);
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 700 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat3);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 701 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat3x4);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 702 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat4x2);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 703 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat4x3);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 704 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, &glsl_type_builtin_dmat4);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 705 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 706 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 707 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 708 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 0, 0, yyextra->ARB_texture_rectangle_enable, &glsl_type_builtin_sampler2DRect);
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 709 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 710 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 0, 0, yyextra->ARB_texture_rectangle_enable, &glsl_type_builtin_sampler2DRectShadow);
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 711 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 712 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 713 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 714 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 254:
YY_RULE_SETUP
#line 717 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 718 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 719 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 720 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 258:
YY_RULE_SETUP
#line 723 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 724 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 725 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 726 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 727 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 728 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable || (yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_buffer_object), &glsl_type_builtin_samplerBuffer);
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 729 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 730 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 266:
YY_RULE_SETUP
#line 733 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(140, 300, 140, 0, yyextra->EXT_gpu_shader4_enable && yyextra->exts->NV_texture_rectangle && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_isampler2DRect);
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 734 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(140, 300, 140, 0, yyextra->EXT_gpu_shader4_enable && yyextra->exts->NV_texture_rectangle && yyextra->exts->EXT_texture_integer, &glsl_type_builtin_usampler2DRect);
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 735 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(140, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable || (yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_buffer_object && yyextra->exts->EXT_texture_integer), &glsl_type_builtin_isamplerBuffer);
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 736 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(140, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable || (yyextra->EXT_gpu_shader4_enable && yyextra->exts->EXT_texture_buffer_object && yyextra->exts->EXT_texture_integer), &glsl_type_builtin_usamplerBuffer);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 270:
YY_RULE_SETUP
#line 739 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD(420, 300, 0, 0, RESOURCE);
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 740 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 320, yyextra->ARB_gpu_shader5_enable || yyextra->OES_shader_multisample_interpolation_enable, SAMPLE);
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 741 "../src/compiler/glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_shader_subroutine_enable, SUBROUTINE);
	YY_BREAK
/* Additional words for ARB_gpu_shader_int64 */
case 273:
YY_RULE_SETUP
#line 744 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_int64_t);
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 745 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_i64vec2);
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 746 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_i64vec3);
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 747 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_i64vec4);
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 749 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_uint64_t);
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 750 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_u64vec2);
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 751 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_u64vec3);
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 752 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, &glsl_type_builtin_u64vec4);
	YY_BREAK
/* Additional words for AMD_gpu_shader_half_float */
case 281:
YY_RULE_SETUP
#line 755 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_float16_t);
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 756 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16vec2);
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 757 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16vec3);
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 758 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16vec4);
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 759 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat2);
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 760 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat3);
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 761 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat4);
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 762 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat2);
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 763 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat2x3);
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 764 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat2x4);
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 765 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat3x2);
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 766 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat3);
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 767 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat3x4);
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 768 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat4x2);
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 769 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat4x3);
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 770 "../src/compiler/glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->AMD_gpu_shader_half_float_enable, &glsl_type_builtin_f16mat4);
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 772 "../src/compiler/glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    if (state->es_shader && yyleng > 1024) {
			       _mesa_glsl_error(yylloc, state,
			                        "Identifier `%s' exceeds 1024 characters",
			                        yytext);
			    }
			    return classify_identifier(state, yytext, yyleng, yylval);
			}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 782 "../src/compiler/glsl/glsl_lexer.ll"
{ struct _mesa_glsl_parse_state *state = yyextra;
			  state->is_field = true;
			  return DOT_TOK; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 786 "../src/compiler/glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 788 "../src/compiler/glsl/glsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3460 "src/compiler/glsl/glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_glsl_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_glsl_lexer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of _mesa_glsl_lexer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_glsl_lexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_glsl_lexer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_glsl_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1154 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1154 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1153);

    (void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_glsl_lexer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_glsl_lexer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_glsl_lexer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_glsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_glsl_lexer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_glsl_lexer_pop_buffer_state();
	 *		_mesa_glsl_lexer_push_buffer_state(new_buffer);
     */
	_mesa_glsl_lexer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_glsl_lexer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_glsl_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_glsl_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_glsl_lexer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_glsl_lexer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_glsl_lexer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_glsl_lexer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_glsl_lexer__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_glsl_lexer_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_glsl_lexer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_glsl_lexer_restart() or at EOF.
 */
    static void _mesa_glsl_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_glsl_lexer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_glsl_lexer__init_buffer was _probably_
     * called from _mesa_glsl_lexer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl_lexer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_glsl_lexer_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_glsl_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_glsl_lexer__switch_to_buffer. */
	_mesa_glsl_lexer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_glsl_lexer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_glsl_lexer_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_lexer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_glsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_glsl_lexer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_glsl_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_glsl_lexer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_glsl_lexer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_glsl_lexer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_glsl_lexer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_lexer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_glsl_lexer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_glsl_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_glsl_lexer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_lexer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_lexer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t _mesa_glsl_lexer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_glsl_lexer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_glsl_lexer_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_lexer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_glsl_lexer_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_glsl_lexer__switch_to_buffer
 */
void _mesa_glsl_lexer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_glsl_lexer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_glsl_lexer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_glsl_lexer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_glsl_lexer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_glsl_lexer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_glsl_lexer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_glsl_lexer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_glsl_lexer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_glsl_lexer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_glsl_lexer_lex_init_extra has the same functionality as _mesa_glsl_lexer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_glsl_lexer_alloc in
 * the yyextra field.
 */

int _mesa_glsl_lexer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_glsl_lexer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_glsl_lexer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_glsl_lexer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_glsl_lexer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_glsl_lexer_lex_init()
     */
    return 0;
}

/* _mesa_glsl_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_glsl_lexer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_glsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_glsl_lexer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_glsl_lexer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_glsl_lexer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_glsl_lexer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_glsl_lexer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_glsl_lexer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_glsl_lexer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_glsl_lexer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_glsl_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 788 "../src/compiler/glsl/glsl_lexer.ll"



int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name,
                    unsigned name_len, YYSTYPE *output)
{
   /* We're not doing linear_strdup here, to avoid an implicit call on
    * strlen() for the length of the string, as this is already found by flex
    * and stored in yyleng
    */
   char *id = (char *) linear_alloc_child(state->linalloc, name_len + 1);
   memcpy(id, name, name_len + 1);
   output->identifier = id;

   if (state->is_field) {
      state->is_field = false;
      return FIELD_SELECTION;
   }
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_glsl_lexer_lex_init_extra(state,& state->scanner);
   _mesa_glsl_lexer__scan_string(string,state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_glsl_lexer_lex_destroy(state->scanner);
}

